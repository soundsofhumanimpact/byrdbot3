{"remainingRequest":"/Users/aletheia/Desktop/byrdbot/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aletheia/Desktop/byrdbot/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/aletheia/Desktop/byrdbot/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aletheia/Desktop/byrdbot/src/components/SoundsOfImpact.vue?vue&type=template&id=6fde6911&scoped=true&","dependencies":[{"path":"/Users/aletheia/Desktop/byrdbot/src/components/SoundsOfImpact.vue","mtime":1638058153000},{"path":"/Users/aletheia/Desktop/byrdbot/node_modules/cache-loader/dist/cjs.js","mtime":1638057732000},{"path":"/Users/aletheia/Desktop/byrdbot/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1638057752000},{"path":"/Users/aletheia/Desktop/byrdbot/node_modules/cache-loader/dist/cjs.js","mtime":1638057732000},{"path":"/Users/aletheia/Desktop/byrdbot/node_modules/vue-loader/lib/index.js","mtime":1638057752000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}