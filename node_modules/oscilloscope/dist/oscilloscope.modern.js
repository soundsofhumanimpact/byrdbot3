export default class{constructor(t,e={}){if(!(t instanceof window.AudioNode))throw new Error("Oscilloscope source must be an AudioNode");t instanceof window.AnalyserNode?this.analyser=t:(this.analyser=t.context.createAnalyser(),t.connect(this.analyser)),e.fftSize&&(this.analyser.fftSize=e.fftSize),this.timeDomain=new Uint8Array(this.analyser.frequencyBinCount),this.drawRequest=0}animate(t,e,i,a,s){if(this.drawRequest)throw new Error("Oscilloscope animation is already running");this.ctx=t;const n=()=>{t.clearRect(0,0,t.canvas.width,t.canvas.height),this.draw(t,e,i,a,s),this.drawRequest=window.requestAnimationFrame(n)};n()}stop(){this.drawRequest&&(window.cancelAnimationFrame(this.drawRequest),this.drawRequest=0,this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height))}draw(t,e=0,i=0,a=t.canvas.width-e,s=t.canvas.height-i){this.analyser.getByteTimeDomainData(this.timeDomain);const n=a/this.timeDomain.length;t.beginPath();for(let a=0;a<this.timeDomain.length;a+=2)t.lineTo(e+a*n,i+s*(this.timeDomain[a]/256));t.stroke()}}
//# sourceMappingURL=oscilloscope.modern.js.map
