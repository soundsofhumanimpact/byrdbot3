{"version":3,"file":"oscilloscope.modern.js","sources":["../src/index.js"],"sourcesContent":["export default class Oscilloscope {\n  constructor (source, options = {}) {\n    if (!(source instanceof window.AudioNode)) {\n      throw new Error('Oscilloscope source must be an AudioNode')\n    }\n\n    if (source instanceof window.AnalyserNode) {\n      this.analyser = source\n    } else {\n      this.analyser = source.context.createAnalyser()\n      source.connect(this.analyser)\n    }\n\n    if (options.fftSize) { this.analyser.fftSize = options.fftSize }\n    this.timeDomain = new Uint8Array(this.analyser.frequencyBinCount)\n    this.drawRequest = 0\n  }\n\n  // begin default signal animation\n  animate (ctx, x0, y0, width, height) {\n    if (this.drawRequest) {\n      throw new Error('Oscilloscope animation is already running')\n    }\n    this.ctx = ctx\n    const drawLoop = () => {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n      this.draw(ctx, x0, y0, width, height)\n      this.drawRequest = window.requestAnimationFrame(drawLoop)\n    }\n    drawLoop()\n  }\n\n  // stop default signal animation\n  stop () {\n    if (this.drawRequest) {\n      window.cancelAnimationFrame(this.drawRequest)\n      this.drawRequest = 0\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)\n    }\n  }\n\n  // draw signal\n  draw (ctx, x0 = 0, y0 = 0, width = ctx.canvas.width - x0, height = ctx.canvas.height - y0) {\n    this.analyser.getByteTimeDomainData(this.timeDomain)\n    const step = width / this.timeDomain.length\n\n    ctx.beginPath()\n    // drawing loop (skipping every second record)\n    for (let i = 0; i < this.timeDomain.length; i += 2) {\n      const percent = this.timeDomain[i] / 256\n      const x = x0 + (i * step)\n      const y = y0 + (height * percent)\n      ctx.lineTo(x, y)\n    }\n\n    ctx.stroke()\n  }\n}\n"],"names":["constructor","source","options","window","AudioNode","Error","AnalyserNode","this","analyser","context","createAnalyser","connect","fftSize","timeDomain","Uint8Array","frequencyBinCount","drawRequest","animate","ctx","x0","y0","width","height","drawLoop","clearRect","canvas","draw","requestAnimationFrame","stop","cancelAnimationFrame","getByteTimeDomainData","step","length","beginPath","i","lineTo","stroke"],"mappings":"qBACEA,YAAaC,EAAQC,EAAU,IAC7B,KAAMD,aAAkBE,OAAOC,WAC7B,UAAUC,MAAM,4CAGdJ,aAAkBE,OAAOG,aAC3BC,KAAKC,SAAWP,GAEhBM,KAAKC,SAAWP,EAAOQ,QAAQC,iBAC/BT,EAAOU,QAAQJ,KAAKC,WAGlBN,EAAQU,UAAWL,KAAKC,SAASI,QAAUV,EAAQU,SACvDL,KAAKM,WAAa,IAAIC,WAAWP,KAAKC,SAASO,mBAC/CR,KAAKS,YAAc,EAIrBC,QAASC,EAAKC,EAAIC,EAAIC,EAAOC,GAC3B,GAAIf,KAAKS,YACP,UAAUX,MAAM,6CAElBE,KAAKW,IAAMA,EACX,MAAMK,EAAW,KACfL,EAAIM,UAAU,EAAG,EAAGN,EAAIO,OAAOJ,MAAOH,EAAIO,OAAOH,QACjDf,KAAKmB,KAAKR,EAAKC,EAAIC,EAAIC,EAAOC,GAC9Bf,KAAKS,YAAcb,OAAOwB,sBAAsBJ,IAElDA,IAIFK,OACMrB,KAAKS,cACPb,OAAO0B,qBAAqBtB,KAAKS,aACjCT,KAAKS,YAAc,EACnBT,KAAKW,IAAIM,UAAU,EAAG,EAAGjB,KAAKW,IAAIO,OAAOJ,MAAOd,KAAKW,IAAIO,OAAOH,SAKpEI,KAAMR,EAAKC,EAAK,EAAGC,EAAK,EAAGC,EAAQH,EAAIO,OAAOJ,MAAQF,EAAIG,EAASJ,EAAIO,OAAOH,OAASF,GACrFb,KAAKC,SAASsB,sBAAsBvB,KAAKM,YACzC,MAAMkB,EAAOV,EAAQd,KAAKM,WAAWmB,OAErCd,EAAIe,YAEJ,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,KAAKM,WAAWmB,OAAQE,GAAK,EAI/ChB,EAAIiB,OAFMhB,EAAMe,EAAIH,EACVX,EAAME,GAFAf,KAAKM,WAAWqB,GAAK,MAMvChB,EAAIkB"}